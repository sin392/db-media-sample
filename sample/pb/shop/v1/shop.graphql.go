// Code generated by proroc-gen-graphql, DO NOT EDIT.
package shop

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_StoreShopRequest        *graphql.Object      // message StoreShopRequest in shop/v1/shop.proto
	gql__type_Shop                    *graphql.Object      // message Shop in shop/v1/shop.proto
	gql__type_Menu                    *graphql.Object      // message Menu in shop/v1/shop.proto
	gql__type_Location                *graphql.Object      // message Location in shop/v1/shop.proto
	gql__type_ListShopResponse        *graphql.Object      // message ListShopResponse in shop/v1/shop.proto
	gql__type_ListShopRequest         *graphql.Object      // message ListShopRequest in shop/v1/shop.proto
	gql__type_FindShopByNameResponse  *graphql.Object      // message FindShopByNameResponse in shop/v1/shop.proto
	gql__type_FindShopByNameRequest   *graphql.Object      // message FindShopByNameRequest in shop/v1/shop.proto
	gql__input_StoreShopRequest       *graphql.InputObject // message StoreShopRequest in shop/v1/shop.proto
	gql__input_Shop                   *graphql.InputObject // message Shop in shop/v1/shop.proto
	gql__input_Menu                   *graphql.InputObject // message Menu in shop/v1/shop.proto
	gql__input_Location               *graphql.InputObject // message Location in shop/v1/shop.proto
	gql__input_ListShopResponse       *graphql.InputObject // message ListShopResponse in shop/v1/shop.proto
	gql__input_ListShopRequest        *graphql.InputObject // message ListShopRequest in shop/v1/shop.proto
	gql__input_FindShopByNameResponse *graphql.InputObject // message FindShopByNameResponse in shop/v1/shop.proto
	gql__input_FindShopByNameRequest  *graphql.InputObject // message FindShopByNameRequest in shop/v1/shop.proto
)

func Gql__type_StoreShopRequest() *graphql.Object {
	if gql__type_StoreShopRequest == nil {
		gql__type_StoreShopRequest = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_StoreShopRequest",
			Description: `StoreShopRequest`,
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `店舗名`,
				},
				"location": &graphql.Field{
					Type:        graphql.NewNonNull(Gql__type_Location()),
					Description: `住所`,
				},
				"tel": &graphql.Field{
					Type:        graphql.String,
					Description: `電話番号`,
				},
				"image_url": &graphql.Field{
					Type:        graphql.String,
					Description: `画像URL`,
				},
				"site_url": &graphql.Field{
					Type:        graphql.String,
					Description: `サイトURL`,
				},
				"rating": &graphql.Field{
					Type:        graphql.Float,
					Description: `評価`,
				},
				"tags": &graphql.Field{
					Type:        graphql.NewList(graphql.String),
					Description: `タグのリスト`,
				},
				"menus": &graphql.Field{
					Type:        graphql.NewList(Gql__type_Menu()),
					Description: `メニューのリスト`,
				},
			},
		})
	}
	return gql__type_StoreShopRequest
}

func Gql__type_Shop() *graphql.Object {
	if gql__type_Shop == nil {
		gql__type_Shop = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_Shop",
			Description: `Shop`,
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `固有ID`,
				},
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `店舗名`,
				},
				"location": &graphql.Field{
					Type:        Gql__type_Location(),
					Description: `住所`,
				},
				"tel": &graphql.Field{
					Type:        graphql.String,
					Description: `電話番号`,
				},
				"image_url": &graphql.Field{
					Type:        graphql.String,
					Description: `画像URL`,
				},
				"site_url": &graphql.Field{
					Type:        graphql.String,
					Description: `サイトURL`,
				},
				"rating": &graphql.Field{
					Type:        graphql.Float,
					Description: `評価`,
				},
				"tags": &graphql.Field{
					Type:        graphql.NewList(graphql.String),
					Description: `タグのリスト`,
				},
				"menus": &graphql.Field{
					Type:        graphql.NewList(Gql__type_Menu()),
					Description: `メニューのリスト`,
				},
			},
		})
	}
	return gql__type_Shop
}

func Gql__type_Menu() *graphql.Object {
	if gql__type_Menu == nil {
		gql__type_Menu = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_Menu",
			Description: `Menu`,
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `商品名`,
				},
				"price": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.Int),
					Description: `価格`,
				},
				"desc": &graphql.Field{
					Type:        graphql.String,
					Description: `商品説明`,
				},
			},
		})
	}
	return gql__type_Menu
}

func Gql__type_Location() *graphql.Object {
	if gql__type_Location == nil {
		gql__type_Location = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_Location",
			Description: `Location`,
			Fields: graphql.Fields{
				"prefecture": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `県`,
				},
				"city": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `市`,
				},
				"address": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `住所`,
				},
			},
		})
	}
	return gql__type_Location
}

func Gql__type_ListShopResponse() *graphql.Object {
	if gql__type_ListShopResponse == nil {
		gql__type_ListShopResponse = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_ListShopResponse",
			Description: `FindShopByNameResponse`,
			Fields: graphql.Fields{
				"shops": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__type_Shop()))),
					Description: `店舗のリスト`,
				},
			},
		})
	}
	return gql__type_ListShopResponse
}

func Gql__type_ListShopRequest() *graphql.Object {
	if gql__type_ListShopRequest == nil {
		gql__type_ListShopRequest = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_ListShopRequest",
			Description: `ListShopRequest`,
			Fields: graphql.Fields{
				"page": &graphql.Field{
					Type:        graphql.Int,
					Description: `ページ番号`,
				},
				"per_page": &graphql.Field{
					Type:        graphql.Int,
					Description: `1ページあたりの表示数`,
				},
			},
		})
	}
	return gql__type_ListShopRequest
}

func Gql__type_FindShopByNameResponse() *graphql.Object {
	if gql__type_FindShopByNameResponse == nil {
		gql__type_FindShopByNameResponse = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_FindShopByNameResponse",
			Description: `FindShopByNameResponse`,
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `固有ID`,
				},
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `店舗名`,
				},
				"location": &graphql.Field{
					Type:        Gql__type_Location(),
					Description: `住所`,
				},
				"tel": &graphql.Field{
					Type:        graphql.String,
					Description: `電話番号`,
				},
				"image_url": &graphql.Field{
					Type:        graphql.String,
					Description: `画像URL`,
				},
				"site_url": &graphql.Field{
					Type:        graphql.String,
					Description: `サイトURL`,
				},
				"rating": &graphql.Field{
					Type:        graphql.Float,
					Description: `評価`,
				},
				"tags": &graphql.Field{
					Type:        graphql.NewList(graphql.String),
					Description: `タグのリスト`,
				},
				"menus": &graphql.Field{
					Type:        graphql.NewList(Gql__type_Menu()),
					Description: `メニューのリスト`,
				},
			},
		})
	}
	return gql__type_FindShopByNameResponse
}

func Gql__type_FindShopByNameRequest() *graphql.Object {
	if gql__type_FindShopByNameRequest == nil {
		gql__type_FindShopByNameRequest = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Shop_Type_FindShopByNameRequest",
			Description: `FindShopByNameRequest`,
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `店舗名`,
				},
			},
		})
	}
	return gql__type_FindShopByNameRequest
}

func Gql__input_StoreShopRequest() *graphql.InputObject {
	if gql__input_StoreShopRequest == nil {
		gql__input_StoreShopRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_StoreShopRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `店舗名`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"location": &graphql.InputObjectFieldConfig{
					Description: `住所`,
					Type:        graphql.NewNonNull(Gql__input_Location()),
				},
				"tel": &graphql.InputObjectFieldConfig{
					Description: `電話番号`,
					Type:        graphql.String,
				},
				"image_url": &graphql.InputObjectFieldConfig{
					Description: `画像URL`,
					Type:        graphql.String,
				},
				"site_url": &graphql.InputObjectFieldConfig{
					Description: `サイトURL`,
					Type:        graphql.String,
				},
				"rating": &graphql.InputObjectFieldConfig{
					Description: `評価`,
					Type:        graphql.Float,
				},
				"tags": &graphql.InputObjectFieldConfig{
					Description: `タグのリスト`,
					Type:        graphql.NewList(graphql.String),
				},
				"menus": &graphql.InputObjectFieldConfig{
					Description: `メニューのリスト`,
					Type:        graphql.NewList(Gql__input_Menu()),
				},
			},
		})
	}
	return gql__input_StoreShopRequest
}

func Gql__input_Shop() *graphql.InputObject {
	if gql__input_Shop == nil {
		gql__input_Shop = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_Shop",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `固有ID`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"name": &graphql.InputObjectFieldConfig{
					Description: `店舗名`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"location": &graphql.InputObjectFieldConfig{
					Description: `住所`,
					Type:        Gql__input_Location(),
				},
				"tel": &graphql.InputObjectFieldConfig{
					Description: `電話番号`,
					Type:        graphql.String,
				},
				"image_url": &graphql.InputObjectFieldConfig{
					Description: `画像URL`,
					Type:        graphql.String,
				},
				"site_url": &graphql.InputObjectFieldConfig{
					Description: `サイトURL`,
					Type:        graphql.String,
				},
				"rating": &graphql.InputObjectFieldConfig{
					Description: `評価`,
					Type:        graphql.Float,
				},
				"tags": &graphql.InputObjectFieldConfig{
					Description: `タグのリスト`,
					Type:        graphql.NewList(graphql.String),
				},
				"menus": &graphql.InputObjectFieldConfig{
					Description: `メニューのリスト`,
					Type:        graphql.NewList(Gql__input_Menu()),
				},
			},
		})
	}
	return gql__input_Shop
}

func Gql__input_Menu() *graphql.InputObject {
	if gql__input_Menu == nil {
		gql__input_Menu = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_Menu",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `商品名`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"price": &graphql.InputObjectFieldConfig{
					Description: `価格`,
					Type:        graphql.NewNonNull(graphql.Int),
				},
				"desc": &graphql.InputObjectFieldConfig{
					Description: `商品説明`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_Menu
}

func Gql__input_Location() *graphql.InputObject {
	if gql__input_Location == nil {
		gql__input_Location = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_Location",
			Fields: graphql.InputObjectConfigFieldMap{
				"prefecture": &graphql.InputObjectFieldConfig{
					Description: `県`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"city": &graphql.InputObjectFieldConfig{
					Description: `市`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"address": &graphql.InputObjectFieldConfig{
					Description: `住所`,
					Type:        graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_Location
}

func Gql__input_ListShopResponse() *graphql.InputObject {
	if gql__input_ListShopResponse == nil {
		gql__input_ListShopResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_ListShopResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"shops": &graphql.InputObjectFieldConfig{
					Description: `店舗のリスト`,
					Type:        graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(Gql__input_Shop()))),
				},
			},
		})
	}
	return gql__input_ListShopResponse
}

func Gql__input_ListShopRequest() *graphql.InputObject {
	if gql__input_ListShopRequest == nil {
		gql__input_ListShopRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_ListShopRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"page": &graphql.InputObjectFieldConfig{
					Description: `ページ番号`,
					Type:        graphql.Int,
				},
				"per_page": &graphql.InputObjectFieldConfig{
					Description: `1ページあたりの表示数`,
					Type:        graphql.Int,
				},
			},
		})
	}
	return gql__input_ListShopRequest
}

func Gql__input_FindShopByNameResponse() *graphql.InputObject {
	if gql__input_FindShopByNameResponse == nil {
		gql__input_FindShopByNameResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_FindShopByNameResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `固有ID`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"name": &graphql.InputObjectFieldConfig{
					Description: `店舗名`,
					Type:        graphql.NewNonNull(graphql.String),
				},
				"location": &graphql.InputObjectFieldConfig{
					Description: `住所`,
					Type:        Gql__input_Location(),
				},
				"tel": &graphql.InputObjectFieldConfig{
					Description: `電話番号`,
					Type:        graphql.String,
				},
				"image_url": &graphql.InputObjectFieldConfig{
					Description: `画像URL`,
					Type:        graphql.String,
				},
				"site_url": &graphql.InputObjectFieldConfig{
					Description: `サイトURL`,
					Type:        graphql.String,
				},
				"rating": &graphql.InputObjectFieldConfig{
					Description: `評価`,
					Type:        graphql.Float,
				},
				"tags": &graphql.InputObjectFieldConfig{
					Description: `タグのリスト`,
					Type:        graphql.NewList(graphql.String),
				},
				"menus": &graphql.InputObjectFieldConfig{
					Description: `メニューのリスト`,
					Type:        graphql.NewList(Gql__input_Menu()),
				},
			},
		})
	}
	return gql__input_FindShopByNameResponse
}

func Gql__input_FindShopByNameRequest() *graphql.InputObject {
	if gql__input_FindShopByNameRequest == nil {
		gql__input_FindShopByNameRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Shop_Input_FindShopByNameRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `店舗名`,
					Type:        graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_FindShopByNameRequest
}

// graphql__resolver_ShopService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_ShopService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_ShopService creates pointer of service struct
func new_graphql_resolver_ShopService(conn *grpc.ClientConn) *graphql__resolver_ShopService {
	return &graphql__resolver_ShopService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_ShopService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_ShopService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"FindShopByName": &graphql.Field{
			Type: Gql__type_FindShopByNameResponse(),
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					Description:  `店舗名`,
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req FindShopByNameRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for FindShopByName")
				}
				client := NewShopServiceClient(conn)
				resp, err := client.FindShopByName(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC FindShopByName")
				}
				return resp, nil
			},
		},
		"ListShop": &graphql.Field{
			Type: Gql__type_ListShopResponse(),
			Args: graphql.FieldConfigArgument{
				"page": &graphql.ArgumentConfig{
					Type:        graphql.Int,
					Description: `ページ番号`,
				},
				"per_page": &graphql.ArgumentConfig{
					Type:        graphql.Int,
					Description: `1ページあたりの表示数`,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ListShopRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for ListShop")
				}
				client := NewShopServiceClient(conn)
				resp, err := client.ListShop(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC ListShop")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_ShopService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterShopServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterShopServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterShopServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
//	service ShopService {
//	   option (graphql.service) = {
//	       host: "host:port"
//	       insecure: true or false
//	   };
//
//	   ...with RPC definitions
//	}
func RegisterShopServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_ShopService(conn))
}
